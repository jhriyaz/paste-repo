- hosts: localhost
  connection: local
  gather_facts: False
  tasks:
    - name: create a VPC with dedicated tenancy and a couple of tags
      ec2_vpc_net:
        name: ansible-vpc
        cidr_block: 10.0.0.0/16
        region: us-east-1
      register: vpc_result

    - name: Create Internet gateway
      ec2_vpc_igw:
        vpc_id: "{{ vpc_result.vpc.id }}"
        state: present
      register: igw

    - name: Create Public subnet for FE servers
      ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc_result.vpc.id }}"
        az: "us-east-1a"
        cidr: 10.0.0.0/24
        map_public: true
        tags:
          Name: Public_Subnet
      register: public_subnet

    - name: Set up public subnet route table
      ec2_vpc_route_table:
        vpc_id: "{{ vpc_result.vpc.id }}"
        tags:
          Name: Public RTB
        subnets:
          - "{{ public_subnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
          - dest: ::/0
            gateway_id: "{{ igw.gateway_id }}"
      register: public_route_table

    - name: Create Private subnet for BE and DB servers
      ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc_result.vpc.id }}"
        az: "us-east-1a"
        cidr: 10.0.1.0/24
        tags:
          Name: Private_Subnet
      register: private_subnet

    - name: Create new NATgw and allocate new EIP if a NATgw does not yet exist in subnet
      ec2_vpc_nat_gateway:
        state: present
        subnet_id: "{{public_subnet.subnet.id}}"
        wait: true
        if_exist_do_not_create: true
      register: nat

    - name: Set up private subnet route table
      ec2_vpc_route_table:
        vpc_id: "{{ vpc_result.vpc.id }}"
        tags:
          Name: Private RTB
        subnets:
          - "{{ private_subnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ nat.nat_gateway_id }}"
      register: private_route_table

    - name: Sg rule descriptions
      ec2_group:
        name: Ansible VPC SG
        description: sg with rule descriptions
        vpc_id: "{{ vpc_result.vpc.id }}"
        rules:
          - proto: tcp
            from_port: 0
            to_port: 65535
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all
      register: sg
